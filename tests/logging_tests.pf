!
!  logging_tests.pf
!  This file is part of flogging.
!  
!  Copyright 2016 Chris MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or
!  modify it under the terms of the GNU Lesser General Public License
!  as published by the Free Software Foundation; either version 3 of
!  the License, or (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful, but
!  WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
!  Lesser General Public License for more details.
!  
!  You should have received a copy of the GNU Lesser General Public
!  License along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
!  02110-1301, USA.
!

module logging_tests
  use iso_fortran_env, only: r8 => real64, iostat_end
  use pfunit_mod
  use logger_mod
  implicit none

  @TestCase
  type, extends(testcase), public :: log_test
    type(logger) :: nonmaster_log, threshold_log
    character(len=18) :: nonmaster_file = 'test_nonmaster.log'
    character(len=18) :: threshold_file = 'test_threshold.log'
    character(len=15) :: master_file = 'test_master.log'
    integer :: threshold = info
  contains
    procedure :: setup
    procedure :: teardown
  end type log_test

contains

  subroutine setup(this)
    class(log_test), intent(inout) :: this
    this%nonmaster_log = logger(this%nonmaster_file, 1000, 0, this%threshold)
    this%threshold_log = logger(this%threshold_file, 1000, 1000, this%threshold)
    call logger_init(this%master_file, 1000, 1000, 0)
  end subroutine setup

  subroutine teardown(this)
    class(log_test), intent(inout) :: this
    if (this%nonmaster_log%is_open()) call this%nonmaster_log%destroy()
    if (master_logger%is_open()) call master_logger%destroy()
    call execute_command_line('rm '//this%nonmaster_file)
    call execute_command_line('rm '//this%threshold_file)
    call execute_command_line('rm '//this%master_file)
  end subroutine teardown

  subroutine test_output(filename, msg_type, src, msg)
    character(len=*), intent(in) :: filename, msg_type, src, msg
    character(len=256) :: line
    integer :: u, flag, is, ie
    open(newunit=u,file=filename,action='read',status='old',iostat=flag)
    @assertEqual(0,flag,message='Error opening log file "'//filename//'"')
    read(u,'(256a)',iostat=flag) line
    close(u)
    @assertEqual(0,flag,message='Error reading log file "'//filename//'"')
    is = 24
    ie = 24 + len(src) - 1
    @assertEqual(src,line(is:ie),message='Incorrect message source printed to file.')
    is = ie + 4
    ie = is + len(msg_type) - 1
    @assertEqual(msg_type,line(is:ie),message='Incorrect message type printed to file.')
    is = ie + 3
    ie = is + len(msg)
    @assertEqual(msg,line(is:ie),message='Incorrect '//msg_type//' message printed to file.')
  end subroutine test_output

  subroutine test_threshold(priority, threshold, filename, msg_type, src, msg)
    integer :: priority, threshold
    character(len=*), intent(in) :: filename, msg_type, src, msg
    character(len=256) :: line
    integer :: u, flag, is, ie
    if (priority >= threshold) then
      call test_output(filename, msg_type, src, msg)
    else
      open(newunit=u,file=filename,action='read',status='old',iostat=flag)
      @assertEqual(0,flag,message='Error opening log file "'//filename//'"')
      read(u,'(256a)',iostat=flag) line
      @assertEqual(iostat_end,flag,message=msg_type//' message printed to log when below threshold priority.')
    end if
  end subroutine test_threshold

  @Test
  subroutine test_debug(this)
    class(log_test), intent(inout) :: this
    character(len=10), parameter :: src = 'test_debug'
    character(len=23), parameter :: msg = 'This is a debug message'
    call master_logger%debug(src, msg)
    call master_logger%destroy()
    call test_output(this%master_file,'debug',src,msg)
    call this%threshold_log%debug(src, msg)
    call this%threshold_log%destroy()
    call test_threshold(debug,this%threshold,this%threshold_file,'debug',src,msg)
  end subroutine test_debug

  @Test
  subroutine test_trivia(this)
    class(log_test), intent(inout) :: this
    character(len=11), parameter :: src = 'test_trivia'
    character(len=24), parameter :: msg = 'This is a trivia message'
    call master_logger%trivia(src, msg)
    call master_logger%destroy()
    call test_output(this%master_file,'trivia',src,msg)
    call this%threshold_log%trivia(src, msg)
    call this%threshold_log%destroy()
    call test_threshold(trivia,this%threshold,this%threshold_file,'trivia',src,msg)
  end subroutine test_trivia

  @Test
  subroutine test_info(this)
    class(log_test), intent(inout) :: this
    character(len=10), parameter :: src = 'test_info'
    character(len=23), parameter :: msg = 'This is an info message'
    call master_logger%info(src, msg)
    call master_logger%destroy()
    call test_output(this%master_file,'info',src,msg)
    call this%threshold_log%info(src, msg)
    call this%threshold_log%destroy()
    call test_threshold(info,this%threshold,this%threshold_file,'info',src,msg)
  end subroutine test_info
  
  @Test
  subroutine test_warning(this)
    class(log_test), intent(inout) :: this
    character(len=12), parameter :: src = 'test_warning'
    character(len=25), parameter :: msg = 'This is a warning message'
    call master_logger%warning(src, msg)
    call master_logger%destroy()
    call test_output(this%master_file,'warning',src,msg)
    call this%threshold_log%warning(src, msg)
    call this%threshold_log%destroy()
    call test_threshold(warning,this%threshold,this%threshold_file,'warning',src,msg)
  end subroutine test_warning
  
  @Test
  subroutine test_error(this)
    class(log_test), intent(inout) :: this
    character(len=10), parameter :: src = 'test_error'
    character(len=24), parameter :: msg = 'This is an error message'
    call master_logger%error(src, msg)
    call master_logger%destroy()
    call test_output(this%master_file,'error',src,msg)
    call this%threshold_log%error(src, msg)
    call this%threshold_log%destroy()
    call test_threshold(error,this%threshold,this%threshold_file,'error',src,msg)
  end subroutine test_error
  
  @Test
  subroutine test_fatal(this)
    class(log_test), intent(inout) :: this
    character(len=10), parameter :: src = 'test_fatal'
    character(len=23), parameter :: msg = 'This is a fatal message'
    call master_logger%fatal(src, msg)
    call master_logger%destroy()
    call test_output(this%master_file,'fatal',src,msg)
    call this%threshold_log%fatal(src, msg)
    call this%threshold_log%destroy()
    call test_threshold(fatal,this%threshold,this%threshold_file,'fatal',src,msg)
  end subroutine test_fatal
  
  @Test
  subroutine test_destroy(this)
    class(log_test), intent(inout) :: this
    @assertTrue(this%nonmaster_log%is_open(),message='Open file claiming to be closed.')
    call this%nonmaster_log%destroy()
    @assertFalse(this%nonmaster_log%is_open(),message='Closed file claiming to be open.')
  end subroutine test_destroy

  @Test
  subroutine test_master(this)
    class(log_test), intent(inout) :: this
    @assertTrue(master_logger%is_open(),message='Master logger not open')
  end subroutine test_master
  
  @Test
  subroutine test_colours(this)
    class(log_test), intent(inout) :: this
    write(*,*)
    write(*,*) 'The portion of the following messages surrounded by "<" and ">" should'
    write(*,*) 'be bold and have the colour which is named on the right.'
    associate(l => this%nonmaster_log)
      call l%debug('test_colours','This should be cyan')
      call l%trivia('test_colours','This should be blue')
      call l%info('test_colours','This should be green')
      call l%warning('test_colours','This should be yellow')
      call l%error('test_colours','This should be red')
      call l%fatal('test_colours','This should have a red background')
    end associate
  end subroutine test_colours
  
end module logging_tests
